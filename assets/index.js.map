{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/**\n * VARIABLES\n **/\n\nvar gen_count = 0;\nvar $config_inputs = $(\"#pass_gen input\");\nvar history_context = \"#history\";\nvar $history = $(history_context);\nvar $history_list = $(\".list-group\", history_context);\nvar $gen_btn = $(\"#pass_gen_btn\");\nvar $pass_input = $(\"#pass_input\");\nvar $pass_copy = $(\"#pass_copy\");\nvar $length_indicator = $(\"#length_indicator\");\nvar ratings_context = \".ratings\";\nvar $all_ratings = $(\".badge\", ratings_context);\nvar $strong_rating = $(\".strong.badge\", ratings_context);\nvar $good_rating = $(\".good.badge\", ratings_context);\nvar $very_good_rating = $(\".very-good.badge\", ratings_context);\nvar $weak_rating = $(\".weak.badge\", ratings_context);\nvar password_config = {\n  pass_length: 32,\n  lowercase: true,\n  numbers: true,\n  symbols: true,\n  uppercase: true,\n};\n\n/**\n * FUNCTIONS\n **/\n\nfunction copyPassword(element_id) {\n  /* Get the text field */\n  var $copyInput = document.getElementById(element_id);\n\n  if (!$copyInput || !$copyInput.value) {\n    console.error(\"Something went wrong. No value to paste.\");\n    return false;\n  }\n\n  /* Select the text field */\n  $copyInput.select();\n  $copyInput.setSelectionRange(0, 99999); /*For mobile devices*/\n\n  /* Copy the text inside the text field */\n  document.execCommand(\"copy\");\n\n  /* Flash confirmation */\n  $copyInput.classList.add(\"copy-confirmation\");\n\n  /* Hide confirmation */\n  setTimeout(function () {\n    $copyInput.classList.remove(\"copy-confirmation\");\n  }, 500);\n}\n\nfunction gradePassword() {\n  var password_grade = 100;\n  var pass_length = password_config.pass_length;\n  var pass_has_lower = password_config.lowercase;\n  var pass_has_upper = password_config.uppercase;\n  var pass_has_num = password_config.numbers;\n  var pass_has_sym = password_config.symbols;\n  \n  // reveal primary \"copy\" button when needed\n  if (gen_count === 0) {\n    $pass_copy.removeClass(\"d-none\");\n  }\n\n  // first adjust by length\n  if (pass_length < 32) {\n    password_grade = 98;\n  }\n\n  if (pass_length < 16) {\n    password_grade = 88;\n  }\n\n  if (pass_length < 12) {\n    password_grade = 80;\n  }\n\n  if (pass_length < 8) {\n    password_grade = 59;\n  }\n\n  if (!pass_has_lower) {\n    password_grade -= 5;\n  }\n\n  if (!pass_has_upper) {\n    password_grade -= 5;\n  }\n\n  if (!pass_has_num) {\n    password_grade -= 7;\n  }\n\n  if (!pass_has_sym) {\n    password_grade -= 7;\n  }\n\n  renderBadges(password_grade);\n}\n\nfunction renderBadges(password_grade) {\n  if (password_grade > 98) {\n    $strong_rating.removeClass(\"d-none\");\n  } else if (password_grade > 84) {\n    $very_good_rating.removeClass(\"d-none\");\n  } else if (password_grade > 70 && password_grade < 85) {\n    $good_rating.removeClass(\"d-none\");\n  } else {\n    $weak_rating.removeClass(\"d-none\");\n  }\n}\n\nfunction getRandomLower() {\n  return String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n}\n\nfunction getRandomUpper() {\n  return String.fromCharCode(Math.floor(Math.random() * 26) + 65);\n}\n\nfunction getRandomNumber() {\n  return +String.fromCharCode(Math.floor(Math.random() * 10) + 48);\n}\n\nfunction getRandomSymbol() {\n  var symbols = \"!@#$%^&*(){}[]=<>/,.\";\n  return symbols[Math.floor(Math.random() * symbols.length)];\n}\n\nfunction generatePassword() {\n  var generatedPassword = \"\";\n  var lower = password_config.lowercase;\n  var upper = password_config.uppercase;\n  var number = password_config.numbers;\n  var symbol = password_config.symbols;\n  var length = password_config.pass_length;\n  var typesCount = lower + upper + number + symbol;\n  var typesArr = [{ lower }, { upper }, { number }, { symbol }].filter(\n    (item) => Object.values(item)[0]\n  );\n  var randomFunc = {\n    lower: getRandomLower,\n    upper: getRandomUpper,\n    number: getRandomNumber,\n    symbol: getRandomSymbol,\n  };\n\n  // hide all rating badges\n  $all_ratings.addClass(\"d-none\");\n\n  if (typesCount == 0) {\n    $pass_input.val(\"\");\n    return false;\n  }\n\n  // start history\n  if (gen_count > 0) {\n    $history.removeClass(\"d-none\");\n    $history_list.prepend(\n      '<li class=\"list-group-item d-flex justify-content-between flex-column\">' + \n      '<input class=\"form-control form-control-sm pass-name\" type=\"text\" placeholder=\"Name it ...\">' +\n      '<div class=\"d-flex mt-1\">' +\n       '<input id=\"old-pass-' +\n        gen_count +\n        '\" class=\"form-control pass-input\" type=\"text\" value=\"' +\n        $pass_input.val() +\n        '\" readonly><button type=\"button\" class=\"btn btn-info btn-sm ml-md-3 history-copy\" data-input=\"old-pass-' +\n        gen_count +\n        '\">Copy</button>' + \n        '<div>' +\n        '</li>'\n    );\n  }\n\n  // create a loop\n  for (var i = 0; i < length; i += typesCount) {\n    typesArr.forEach((type) => {\n      const funcName = Object.keys(type)[0];\n      generatedPassword += randomFunc[funcName]();\n    });\n  }\n\n  var finalPassword = generatedPassword.slice(0, length);\n  $pass_input.val(finalPassword);\n\n  // grade it!\n  gradePassword();\n\n  // record count hit\n  gen_count++;\n\n  return false;\n}\n\nfunction configChange() {\n  var $this = $(this);\n  var value = $this.val();\n  var property = $this.prop(\"id\");\n  var new_value = $this.prop(\"checked\");\n\n  if (property == \"pass_length\") {\n    new_value = parseInt(value);\n    $length_indicator.text(value);\n  }\n\n  password_config[property] = new_value;\n  return false;\n}\n\n/**\n * CHANGE\n **/\n\n$config_inputs.change(configChange);\n\n/**\n * CLICK\n **/\n\n$gen_btn.click(generatePassword);\n\n$pass_copy.click(function () {\n  copyPassword(\"pass_input\");\n});\n\n$(\"body\").on(\"click\", \".history-copy\", function () {\n  var input_id = $(this).data(\"input\");\n  copyPassword(input_id);\n});"]}